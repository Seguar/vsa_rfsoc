<?xml version="1.0" encoding="utf-8"?>
<MATLABInstrumentDriver>
   <FileVersion>2.42</FileVersion>
   <DriverName>KtM5301x</DriverName>
   <DriverType>MATLAB IVI-C</DriverType>
   <InstrumentType>IVIInstrument</InstrumentType>
   <InstrumentManufacturer>Unknown</InstrumentManufacturer>
   <InstrumentModel>KtM5301x</InstrumentModel>
   <InstrumentVersion>1.0</InstrumentVersion>
   <Identify/>
   <Reset/>
   <Selftest/>
   <Error/>
   <CreateInitCode>
      <Code>function init(obj)
% This function is called after the object is created.
% OBJ is the device object.
% End of function definition - DO NOT EDIT
</Code>
   </CreateInitCode>
   <ConnectInitCode>
      <Type>MCode</Type>
      <Code>function init(obj)
% This function is called after the object is connected.
% OBJ is the device object.
% End of function definition - DO NOT EDIT
</Code>
   </ConnectInitCode>
   <CleanupCode>
      <Type>MCode</Type>
      <Code>function cleanup(obj)
% This function is called before the object is disconnected.
% OBJ is the device object.
% End of function definition - DO NOT EDIT
</Code>
   </CleanupCode>
   <GroupInfo>
      <Group>
         <Name>parent</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="parent1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>initwithoptions</Name>
               <Location>parent</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Vi] = initwithoptions(obj, ResourceName, IdQuery, Reset, OptionsString)

libname = get(obj, 'DriverName');
session = get(obj, 'Interface');
ResourceName = [double(ResourceName) 0];
OptionsString = [double(OptionsString) 0];
Vi = libpointer('uint32Ptr', 0);

status = calllib(libname, 'KtM5301x_InitWithOptions', ResourceName, IdQuery, Reset, OptionsString, Vi);

Vi = double(Vi.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Opens the I/O session to the instrument.  Driver methods and properties that access the instrument are only accessible after Initialize is called.  Initialize optionally performs a Reset and queries the instrument to validate the instrument model.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>AttributeAccessors</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="AttributeAccessors1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>getattributeviboolean</Name>
               <Location>AttributeAccessors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [AttributeValue] = getattributeviboolean(obj, RepCapIdentifier, AttributeID)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
RepCapIdentifier = [double(RepCapIdentifier) 0];
AttributeValue = libpointer('uint16Ptr', 0);

status = calllib(libname, 'KtM5301x_GetAttributeViBoolean', session, RepCapIdentifier, AttributeID, AttributeValue);

AttributeValue = double(AttributeValue.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This routine is used to access low-level settings of the instrument. See the attributeID parameter for a link to all attributes of the instrument.</Description>
            </Method>
            <Method>
               <Name>getattributeviint32</Name>
               <Location>AttributeAccessors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [AttributeValue] = getattributeviint32(obj, RepCapIdentifier, AttributeID)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
RepCapIdentifier = [double(RepCapIdentifier) 0];
AttributeValue = libpointer('int32Ptr', 0);

status = calllib(libname, 'KtM5301x_GetAttributeViInt32', session, RepCapIdentifier, AttributeID, AttributeValue);

AttributeValue = double(AttributeValue.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This routine is used to access low-level settings of the instrument. See the attributeID parameter for a link to all attributes of the instrument.</Description>
            </Method>
            <Method>
               <Name>getattributeviint64</Name>
               <Location>AttributeAccessors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [AttributeValue] = getattributeviint64(obj, RepCapIdentifier, AttributeID)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
RepCapIdentifier = [double(RepCapIdentifier) 0];
AttributeValue = libpointer('int64Ptr', 0);

status = calllib(libname, 'KtM5301x_GetAttributeViInt64', session, RepCapIdentifier, AttributeID, AttributeValue);

AttributeValue = double(AttributeValue.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This routine is used to access low-level settings of the instrument. See the attributeID parameter for a link to all attributes of the instrument.</Description>
            </Method>
            <Method>
               <Name>getattributevireal64</Name>
               <Location>AttributeAccessors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [AttributeValue] = getattributevireal64(obj, RepCapIdentifier, AttributeID)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
RepCapIdentifier = [double(RepCapIdentifier) 0];
AttributeValue = libpointer('doublePtr', 0);

status = calllib(libname, 'KtM5301x_GetAttributeViReal64', session, RepCapIdentifier, AttributeID, AttributeValue);

AttributeValue = double(AttributeValue.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This routine is used to access low-level settings of the instrument. See the attributeID parameter for a link to all attributes of the instrument.</Description>
            </Method>
            <Method>
               <Name>getattributevisession</Name>
               <Location>AttributeAccessors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [AttributeValue] = getattributevisession(obj, RepCapIdentifier, AttributeID)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
RepCapIdentifier = [double(RepCapIdentifier) 0];
AttributeValue = libpointer('uint32Ptr', 0);

status = calllib(libname, 'KtM5301x_GetAttributeViSession', session, RepCapIdentifier, AttributeID, AttributeValue);

AttributeValue = double(AttributeValue.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This routine is used to access low-level settings of the instrument. See the attributeID parameter for a link to all attributes of the instrument.</Description>
            </Method>
            <Method>
               <Name>getattributevistring</Name>
               <Location>AttributeAccessors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [AttributeValue] = getattributevistring(obj, RepCapIdentifier, AttributeID, AttributeValueBufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
RepCapIdentifier = [double(RepCapIdentifier) 0];
AttributeValue = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'KtM5301x_GetAttributeViString', session, RepCapIdentifier, AttributeID, AttributeValueBufferSize, AttributeValue);

AttributeValue = strtrim(char(AttributeValue.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This routine is used to access low-level settings of the instrument. See the attributeID parameter for a link to all attributes of the instrument.</Description>
            </Method>
            <Method>
               <Name>setattributeviboolean</Name>
               <Location>AttributeAccessors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setattributeviboolean(obj, RepCapIdentifier, AttributeID, AttributeValue)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
RepCapIdentifier = [double(RepCapIdentifier) 0];

status = calllib(libname, 'KtM5301x_SetAttributeViBoolean', session, RepCapIdentifier, AttributeID, AttributeValue);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This routine is used to access low-level settings of the instrument. See the attributeID parameter for a link to all attributes of the instrument.</Description>
            </Method>
            <Method>
               <Name>setattributeviint32</Name>
               <Location>AttributeAccessors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setattributeviint32(obj, RepCapIdentifier, AttributeID, AttributeValue)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
RepCapIdentifier = [double(RepCapIdentifier) 0];

status = calllib(libname, 'KtM5301x_SetAttributeViInt32', session, RepCapIdentifier, AttributeID, AttributeValue);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This routine is used to access low-level settings of the instrument. See the attributeID parameter for a link to all attributes of the instrument.</Description>
            </Method>
            <Method>
               <Name>setattributeviint64</Name>
               <Location>AttributeAccessors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setattributeviint64(obj, RepCapIdentifier, AttributeID, AttributeValue)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
RepCapIdentifier = [double(RepCapIdentifier) 0];

status = calllib(libname, 'KtM5301x_SetAttributeViInt64', session, RepCapIdentifier, AttributeID, AttributeValue);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This routine is used to access low-level settings of the instrument. See the attributeID parameter for a link to all attributes of the instrument.</Description>
            </Method>
            <Method>
               <Name>setattributevireal64</Name>
               <Location>AttributeAccessors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setattributevireal64(obj, RepCapIdentifier, AttributeID, AttributeValue)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
RepCapIdentifier = [double(RepCapIdentifier) 0];

status = calllib(libname, 'KtM5301x_SetAttributeViReal64', session, RepCapIdentifier, AttributeID, AttributeValue);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This routine is used to access low-level settings of the instrument. See the attributeID parameter for a link to all attributes of the instrument.</Description>
            </Method>
            <Method>
               <Name>setattributevisession</Name>
               <Location>AttributeAccessors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setattributevisession(obj, RepCapIdentifier, AttributeID, AttributeValue)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
RepCapIdentifier = [double(RepCapIdentifier) 0];

status = calllib(libname, 'KtM5301x_SetAttributeViSession', session, RepCapIdentifier, AttributeID, AttributeValue);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This routine is used to access low-level settings of the instrument. See the attributeID parameter for a link to all attributes of the instrument.</Description>
            </Method>
            <Method>
               <Name>setattributevistring</Name>
               <Location>AttributeAccessors</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function setattributevistring(obj, RepCapIdentifier, AttributeID, AttributeValue)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
RepCapIdentifier = [double(RepCapIdentifier) 0];
AttributeValue = [double(AttributeValue) 0];

status = calllib(libname, 'KtM5301x_SetAttributeViString', session, RepCapIdentifier, AttributeID, AttributeValue);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This routine is used to access low-level settings of the instrument. See the attributeID parameter for a link to all attributes of the instrument.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>InherentIVIAttributesAdvancedSessionInformation</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InherentIVIAttributesAdvancedSessionInformation1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Driver_Setup</Name>
               <Location>InherentIVIAttributesAdvancedSessionInformation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050007, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The driver setup string.  It is either specified in the Configuration Store or passed in the OptionString parameter of the Initialize function.  Driver setup is empty if the driver is not initialized.</Description>
            </Property>
            <Property>
               <Name>I_O_Resource_Descriptor</Name>
               <Location>InherentIVIAttributesAdvancedSessionInformation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050304, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The resource descriptor specifies the connection to a physical device.  It is either specified in the Configuration Store or passed in the ResourceName parameter of the Initialize function.  It is empty if the driver is not initialized.</Description>
            </Property>
            <Property>
               <Name>Logical_Name</Name>
               <Location>InherentIVIAttributesAdvancedSessionInformation</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050305, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Logical Name identifies a driver session in the Configuration Store.  If Logical Name is not empty, the driver was initialized from information in the driver session.  If it is empty, the driver was initialized without using the Configuration Store.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>InherentIVIAttributesDriverCapabilities</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InherentIVIAttributesDriverCapabilities1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Class_Group_Capabilities</Name>
               <Location>InherentIVIAttributesDriverCapabilities</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050401, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>A comma-separated list of the class capability groups implemented by the driver.  Capability group names are documented in the IVI class specifications.  If the driver is not class compliant, the driver returns an empty string.</Description>
            </Property>
            <Property>
               <Name>Supported_Instrument_Models</Name>
               <Location>InherentIVIAttributesDriverCapabilities</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050327, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>A comma-separated list of instrument models that the IVI specific driver can control.  The string does not include an abbreviation for the manufacturer if it is the same for all models.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>InherentIVIAttributesDriverIdentification</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InherentIVIAttributesDriverIdentification1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Specific_Driver_Class_Spec_Major_Version</Name>
               <Location>InherentIVIAttributesDriverIdentification</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1050515);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the major version number of the class specification in accordance with which the IVI specific driver was developed. Zero is returned if the driver is not compliant with a class specification.</Description>
            </Property>
            <Property>
               <Name>Specific_Driver_Class_Spec_Minor_Version</Name>
               <Location>InherentIVIAttributesDriverIdentification</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1050516);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the minor version number of the class specification in accordance with which the IVI specific driver was developed. Zero is returned if the driver is not compliant with a class specification.</Description>
            </Property>
            <Property>
               <Name>Specific_Driver_Description</Name>
               <Location>InherentIVIAttributesDriverIdentification</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050514, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Returns a brief description of the IVI specific driver. The string that this attribute returns contains a maximum of 256 bytes including the NUL byte.</Description>
            </Property>
            <Property>
               <Name>Specific_Driver_Prefix</Name>
               <Location>InherentIVIAttributesDriverIdentification</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050302, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the case-sensitive prefix of the user-callable functions that the IVI-C specific driver exports. The string that this attribute returns contains a maximum of 32 bytes including the NUL byte.</Description>
            </Property>
            <Property>
               <Name>Specific_Driver_Revision</Name>
               <Location>InherentIVIAttributesDriverIdentification</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050551, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Returns version information about the IVI specific driver. The string that this attribute returns contains a maximum of 256 bytes including the NUL byte.</Description>
            </Property>
            <Property>
               <Name>Specific_Driver_Vendor</Name>
               <Location>InherentIVIAttributesDriverIdentification</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050513, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the name of the vendor that supplies the IVI specific driver. The string that this attribute returns contains a maximum of 256 bytes including the NUL byte.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>InherentIVIAttributesInstrumentIdentification</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InherentIVIAttributesInstrumentIdentification1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Instrument_Firmware_Revision</Name>
               <Location>InherentIVIAttributesInstrumentIdentification</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050510, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The firmware revision reported by the physical instrument.  If Simulation is enabled or the instrument is not capable of reporting the firmware revision, a string is returned that explains the condition.</Description>
            </Property>
            <Property>
               <Name>Instrument_Manufacturer</Name>
               <Location>InherentIVIAttributesInstrumentIdentification</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050511, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The name of the manufacturer reported by the physical instrument.  If Simulation is enabled or the instrument is not capable of reporting the name of the manufacturer, a string is returned that explains the condition. Manufacturer is limited to 256 bytes</Description>
            </Property>
            <Property>
               <Name>Instrument_Model</Name>
               <Location>InherentIVIAttributesInstrumentIdentification</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1050512, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The model number or name reported by the physical instrument.  If Simulation is enabled or the instrument is not capable of reporting the model number or name, a string is returned that explains the condition.  Model is limited to 256 bytes</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>InherentIVIAttributesUserOptions</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InherentIVIAttributesUserOptions1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Cache</Name>
               <Location>InherentIVIAttributesUserOptions</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1050004);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1050004, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Drivers may choose to always cache some instrument settings, never cache others, and optionally cache others, to avoid unnecessary I/O to the instrument.  If True, the driver caches optionally cached instrument settings.</Description>
            </Property>
            <Property>
               <Name>Interchange_Check</Name>
               <Location>InherentIVIAttributesUserOptions</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1050021);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1050021, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>If True, the driver maintains a record of interchangeability warnings.  If the driver does not support interchangeability checking, attempts to set InterchangeCheck to True return an error.</Description>
            </Property>
            <Property>
               <Name>Query_Instrument_Status</Name>
               <Location>InherentIVIAttributesUserOptions</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1050003);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1050003, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>If True, the driver queries the instrument status at the end of each method or property that performs I/O to the instrument.  If an error is reported, use ErrorQuery to retrieve error messages one at a time from the instrument.</Description>
            </Property>
            <Property>
               <Name>Range_Check</Name>
               <Location>InherentIVIAttributesUserOptions</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1050002);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1050002, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Drivers may choose to always validate some property/parameter values, never validate others, and optionally validate others, to avoid sending invalid commands to the instrument.  If True, the driver performs optional validations.</Description>
            </Property>
            <Property>
               <Name>Record_Value_Coercions</Name>
               <Location>InherentIVIAttributesUserOptions</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1050006);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1050006, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>If True, the driver keeps a list of the value coercions it makes for ViInt32 and ViReal64 attributes.  If the driver does not support coercion recording, attempts to set RecordCoercions to True will return an error.</Description>
            </Property>
            <Property>
               <Name>Simulate</Name>
               <Location>InherentIVIAttributesUserOptions</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1050005);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1050005, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>If True, the driver does not perform I/O to the instrument, and returns simulated values for output parameters.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>InstrumentSpecific</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecific1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>apply</Name>
               <Location>InstrumentSpecific</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function apply(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'KtM5301x_Apply', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Applies any pending parameter changes to the hardware. Any parameter validation errors are written to the error log and can be queried through Utility ErrorQuery().</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>InstrumentSpecificAwgMultiple</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificAwgMultiple1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>amplitude</Name>
               <Location>InstrumentSpecificAwgMultiple</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function amplitude(obj, ChannelMask, Value)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'KtM5301x_Amplitude', session, ChannelMask, Value);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>pause</Name>
               <Location>InstrumentSpecificAwgMultiple</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function pause(obj, ChannelMask)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'KtM5301x_Pause', session, ChannelMask);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Pauses the selected AWGs leaving the last waveform point at the output of each channel, and ignoring all incoming triggers.</Description>
            </Method>
            <Method>
               <Name>queueflush</Name>
               <Location>InstrumentSpecificAwgMultiple</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function queueflush(obj, ChannelMask)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'KtM5301x_QueueFlush', session, ChannelMask);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>resume</Name>
               <Location>InstrumentSpecificAwgMultiple</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function resume(obj, ChannelMask)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'KtM5301x_Resume', session, ChannelMask);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Resumes the operation of the selected AWGs from the current position of their respective queues.</Description>
            </Method>
            <Method>
               <Name>start</Name>
               <Location>InstrumentSpecificAwgMultiple</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function start(obj, ChannelMask)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'KtM5301x_Start', session, ChannelMask);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Starts the selected AWGs from the beginning of their queues.</Description>
            </Method>
            <Method>
               <Name>stop</Name>
               <Location>InstrumentSpecificAwgMultiple</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function stop(obj, ChannelMask)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'KtM5301x_Stop', session, ChannelMask);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Stops the selected AWGs, sets their outputs to zero and resets their respective queues to the initial positions. All following incoming triggers are ignored.</Description>
            </Method>
            <Method>
               <Name>trigger</Name>
               <Location>InstrumentSpecificAwgMultiple</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function trigger(obj, ChannelMask)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'KtM5301x_Trigger', session, ChannelMask);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Triggers the selected AWGs. The waveforms waiting in the current position of their respective queues is launched provided they are configured with an VI/HVI Trigger.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>InstrumentSpecificCalibration</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificCalibration1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>AdjustmentInformation</Name>
               <Location>InstrumentSpecificCalibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150016, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - A comma separated list of calibration adjustment information. Includes the calibration date and instrument identification.  Returns an empty string if any of the modules in the current system have not been calibrated.</Description>
            </Property>
            <Property>
               <Name>DueDate</Name>
               <Location>InstrumentSpecificCalibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150017, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - The computed date of the next required instrument calibration. If the instrument is not subject to calibration, this will return 'n/a'.  If the instrument is not calibrated this will return 'unknown'.  If the instrument is calibrated this will return a date formatted for the current locale.</Description>
            </Property>
            <Property>
               <Name>InstrumentIdentifier</Name>
               <Location>InstrumentSpecificCalibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150018, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - A unique identifier for the collection of modules that make up the current instrument.  This will not include modules that are independently calibrated (typically just the M9300A reference module). This value is used in tracking instrument calibration verification.</Description>
            </Property>
            <Property>
               <Name>Status</Name>
               <Location>InstrumentSpecificCalibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150019);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>2.0</Value>
                     <Value>4.0</Value>
                     <Value>1.0</Value>
                     <Value>3.0</Value>
                     <Value>0.0</Value>
                     <Value>5.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - This property indicates the calibration status of the instrument.  The status is determined by comparing the (calibration due date - cal due reminder value) to the current date.</Description>
            </Property>
            <Property>
               <Name>VerificationInformation</Name>
               <Location>InstrumentSpecificCalibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150020, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - A comma separated list of calibration verification information. Includes the calibration date and instrument identification.  Returns an empty string if any of the modules in the current system have not been calibrated.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>InstrumentSpecificChannel</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificChannel1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Amplitude</Name>
               <Location>InstrumentSpecificChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150356);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150356 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Sets the amplitude of a channel.</Description>
            </Property>
            <Property>
               <Name>Channel_Count</Name>
               <Location>InstrumentSpecificChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150327);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>Enabled</Name>
               <Location>InstrumentSpecificChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150328);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150328, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Indicates that the Channel (selected previously) is enabled for playing waveform output.</Description>
            </Property>
            <Property>
               <Name>Offset</Name>
               <Location>InstrumentSpecificChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150357);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150357 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Sets the DC offset of a channel. Each channel has an Amplitude Modulator block that has an amplitude and DC offset control.</Description>
            </Property>
            <Property>
               <Name>Skew</Name>
               <Location>InstrumentSpecificChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150360);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150360 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Adjusts the skew on the Channel.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>awgjumpnextwaveform</Name>
               <Location>InstrumentSpecificChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function awgjumpnextwaveform(obj, ChannelName)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];

status = calllib(libname, 'KtM5301x_AwgJumpNextWaveform', session, ChannelName);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Forces a jump to the next waveform in the AWG queue. The jump is executed once the current waveform has finished a complete cycle.</Description>
            </Method>
            <Method>
               <Name>awgpause</Name>
               <Location>InstrumentSpecificChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function awgpause(obj, ChannelName)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];

status = calllib(libname, 'KtM5301x_AwgPause', session, ChannelName);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Pauses the selected AWG leaving the last waveform point at the output and ignoring all incoming triggers. The AWG can be resumed by calling awg_resume().</Description>
            </Method>
            <Method>
               <Name>awgqueueflush</Name>
               <Location>InstrumentSpecificChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function awgqueueflush(obj, ChannelName)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];

status = calllib(libname, 'KtM5301x_AwgQueueFlush', session, ChannelName);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Empties the queue of the selected AWG channel. Waveforms are not removed from the module's onboard RAM.</Description>
            </Method>
            <Method>
               <Name>awgqueuewaveform</Name>
               <Location>InstrumentSpecificChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function awgqueuewaveform(obj, ChannelName, TriggerMode, StartDelay, Cycles, WaveformId)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];

status = calllib(libname, 'KtM5301x_AwgQueueWaveform', session, ChannelName, TriggerMode, StartDelay, Cycles, WaveformId);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Queues the specified waveform in one of the module's AWGs. The waveform must be already loaded in the module's onboard RAM.</Description>
            </Method>
            <Method>
               <Name>awgresume</Name>
               <Location>InstrumentSpecificChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function awgresume(obj, ChannelName)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];

status = calllib(libname, 'KtM5301x_AwgResume', session, ChannelName);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Resumes the operation of the selected AWG from the current position of the queue. The waveform generation can be paused by calling awg_pause().</Description>
            </Method>
            <Method>
               <Name>awgstart</Name>
               <Location>InstrumentSpecificChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function awgstart(obj, ChannelName)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];

status = calllib(libname, 'KtM5301x_AwgStart', session, ChannelName);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Starts the selected AWG from the beginning of its queue. The generation starts immediately or when a trigger is received, depending on the trigger selection of the first waveform in the queue and provided that at least one waveform is queued in the AWG.</Description>
            </Method>
            <Method>
               <Name>awgstop</Name>
               <Location>InstrumentSpecificChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function awgstop(obj, ChannelName)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];

status = calllib(libname, 'KtM5301x_AwgStop', session, ChannelName);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Stops the selected AWG, setting the output to zero, and resetting the AWG queue to its initial position. All following incoming triggers are ignored.</Description>
            </Method>
            <Method>
               <Name>awgtrigger</Name>
               <Location>InstrumentSpecificChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function awgtrigger(obj, ChannelName)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];

status = calllib(libname, 'KtM5301x_AwgTrigger', session, ChannelName);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Triggers the selected AWG. The waveform waiting in the current position of the queue is launched provided it is configured with VI/HVI Trigger.</Description>
            </Method>
            <Method>
               <Name>externaltriggerconfig</Name>
               <Location>InstrumentSpecificChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function externaltriggerconfig(obj, ChannelName, Source, Mode, Sync)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];

status = calllib(libname, 'KtM5301x_ExternalTriggerConfig', session, ChannelName, Source, Mode, Sync);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures the external triggers for the selected AWG. The external trigger is used in case the waveform is queued with the 'external trigger mode' option.</Description>
            </Method>
            <Method>
               <Name>getchannelname</Name>
               <Location>InstrumentSpecificChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Name] = getchannelname(obj, Index, NameBufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Name = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'KtM5301x_GetChannelName', session, Index, NameBufferSize, Name);

Name = strtrim(char(Name.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Returns the channel name that corresponds to the one-based index that the user specifies.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>InstrumentSpecificChannelArbitraryWaveform</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificChannelArbitraryWaveform1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Padding_Mode</Name>
               <Location>InstrumentSpecificChannelArbitraryWaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150358);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150358 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>2.0</Value>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>Playback_Mode</Name>
               <Location>InstrumentSpecificChannelArbitraryWaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150336);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150336 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>Queue_Output_On_Stop</Name>
               <Location>InstrumentSpecificChannelArbitraryWaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150359);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150359 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Configures the value that the waveform queue must be set to when waveform play is set to stop using awg_stop(), or when the waveform cycles in the queue come to an end.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>clearwaveformmemory</Name>
               <Location>InstrumentSpecificChannelArbitraryWaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function clearwaveformmemory(obj, ChannelName)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];

status = calllib(libname, 'KtM5301x_ClearWaveformMemory', session, ChannelName);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Clear the waveforms that were loaded in the waveform memory.</Description>
            </Method>
            <Method>
               <Name>create</Name>
               <Location>InstrumentSpecificChannelArbitraryWaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function create(obj, ChannelName, DataBufferSize, Data, WaveformId)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];

status = calllib(libname, 'KtM5301x_Create', session, ChannelName, DataBufferSize, Data, WaveformId);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>createfromfile</Name>
               <Location>InstrumentSpecificChannelArbitraryWaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function createfromfile(obj, ChannelName, FilePath, WaveformId, Type)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];
FilePath = [double(FilePath) 0];

status = calllib(libname, 'KtM5301x_CreateFromFile', session, ChannelName, FilePath, WaveformId, Type);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>createint16</Name>
               <Location>InstrumentSpecificChannelArbitraryWaveform</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function createint16(obj, ChannelName, DataBufferSize, Data, WaveformId)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ChannelName = [double(ChannelName) 0];

status = calllib(libname, 'KtM5301x_CreateInt16', session, ChannelName, DataBufferSize, Data, WaveformId);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description/>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>InstrumentSpecificClock</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificClock1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Alignment_Status</Name>
               <Location>InstrumentSpecificClock</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150361);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>2.0</Value>
                     <Value>0.0</Value>
                     <Value>1.0</Value>
                     <Value>3.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the current state of clock alignment.</Description>
            </Property>
            <Property>
               <Name>Clock_Source</Name>
               <Location>InstrumentSpecificClock</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150347);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150347 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Sets the reference clock source as either INTERNAL or EXTERNAL.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>align</Name>
               <Location>InstrumentSpecificClock</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function align(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'KtM5301x_Align', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This method performs the clock alignment.</Description>
            </Method>
            <Method>
               <Name>invalidatecurrentalignment</Name>
               <Location>InstrumentSpecificClock</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function invalidatecurrentalignment(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'KtM5301x_InvalidateCurrentAlignment', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Run this method to reset the clock alignment settings.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>InstrumentSpecificFpgaSandbox</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificFpgaSandbox1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>FpgaName</Name>
               <Location>InstrumentSpecificFpgaSandbox</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150302, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Name of the FPGA hosting the sandbox.</Description>
            </Property>
            <Property>
               <Name>FpgaSandbox_Count</Name>
               <Location>InstrumentSpecificFpgaSandbox</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150301);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>FpgaVersion</Name>
               <Location>InstrumentSpecificFpgaSandbox</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150303, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Version of the FPGA hosting the sandbox.</Description>
            </Property>
            <Property>
               <Name>KernelId</Name>
               <Location>InstrumentSpecificFpgaSandbox</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150305, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Unique ID of the currently loaded sandbox content identifying the algorithm.</Description>
            </Property>
            <Property>
               <Name>SandboxIndex</Name>
               <Location>InstrumentSpecificFpgaSandbox</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150306);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Index of this Sandbox within the FPGA.</Description>
            </Property>
            <Property>
               <Name>StaticRegionId</Name>
               <Location>InstrumentSpecificFpgaSandbox</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150304, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Unique ID of the currently loaded static region, 128 bits, formatted as a string of 32 hex characters.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>configuretrigger</Name>
               <Location>InstrumentSpecificFpgaSandbox</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function configuretrigger(obj, FpgaSandboxName, Source, Direction, Polarity, SyncMode, Delay)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
FpgaSandboxName = [double(FpgaSandboxName) 0];

status = calllib(libname, 'KtM5301x_ConfigureTrigger', session, FpgaSandboxName, Source, Direction, Polarity, SyncMode, Delay);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Configures the trigger line direction.</Description>
            </Method>
            <Method>
               <Name>fpgasandboxallocatememory</Name>
               <Location>InstrumentSpecificFpgaSandbox</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Address] = fpgasandboxallocatememory(obj, FpgaSandbox, Space, Length)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
FpgaSandbox = [double(FpgaSandbox) 0];
Space = [double(Space) 0];
Address = libpointer('int64Ptr', 0);

status = calllib(libname, 'KtM5301x_FpgaSandboxAllocateMemory', session, FpgaSandbox, Space, Length, Address);

Address = double(Address.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Allocate a block of module memory for FPGA sandbox use.</Description>
            </Method>
            <Method>
               <Name>fpgasandboxconfigure</Name>
               <Location>InstrumentSpecificFpgaSandbox</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function fpgasandboxconfigure(obj, FpgaSandbox, ClearFile, ProgramFile)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
FpgaSandbox = [double(FpgaSandbox) 0];
ClearFile = [double(ClearFile) 0];
ProgramFile = [double(ProgramFile) 0];

status = calllib(libname, 'KtM5301x_FpgaSandboxConfigure', session, FpgaSandbox, ClearFile, ProgramFile);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Perform partial reconfiguration of the FPGA to configure (or load) the sandbox from bitstream files.</Description>
            </Method>
            <Method>
               <Name>fpgasandboxconfigurefromarray</Name>
               <Location>InstrumentSpecificFpgaSandbox</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function fpgasandboxconfigurefromarray(obj, FpgaSandbox, ClearBitstreamBufferSize, ClearBitstream, ProgramBitstreamBufferSize, ProgramBitstream)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
FpgaSandbox = [double(FpgaSandbox) 0];

status = calllib(libname, 'KtM5301x_FpgaSandboxConfigureFromArray', session, FpgaSandbox, ClearBitstreamBufferSize, ClearBitstream, ProgramBitstreamBufferSize, ProgramBitstream);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Perform partial reconfiguration of the FPGA to configure (or load) the sandbox from bitstream data arrays.</Description>
            </Method>
            <Method>
               <Name>fpgasandboxconfigurefromk7z</Name>
               <Location>InstrumentSpecificFpgaSandbox</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function fpgasandboxconfigurefromk7z(obj, FpgaSandbox, K7zFile)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
FpgaSandbox = [double(FpgaSandbox) 0];
K7zFile = [double(K7zFile) 0];

status = calllib(libname, 'KtM5301x_FpgaSandboxConfigureFromK7z', session, FpgaSandbox, K7zFile);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Perform partial reconfiguration of the FPGA to configure (or load) the sandbox region from from .k7z PathWave FPGA archive.</Description>
            </Method>
            <Method>
               <Name>fpgasandboxfreememory</Name>
               <Location>InstrumentSpecificFpgaSandbox</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function fpgasandboxfreememory(obj, FpgaSandbox, Space, Address)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
FpgaSandbox = [double(FpgaSandbox) 0];
Space = [double(Space) 0];

status = calllib(libname, 'KtM5301x_FpgaSandboxFreeMemory', session, FpgaSandbox, Space, Address);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Free a block of module memory previously allocated.</Description>
            </Method>
            <Method>
               <Name>fpgasandboxgetmemoryaddress</Name>
               <Location>InstrumentSpecificFpgaSandbox</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Address] = fpgasandboxgetmemoryaddress(obj, FpgaSandbox, Name)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
FpgaSandbox = [double(FpgaSandbox) 0];
Name = [double(Name) 0];
Address = libpointer('int64Ptr', 0);

status = calllib(libname, 'KtM5301x_FpgaSandboxGetMemoryAddress', session, FpgaSandbox, Name, Address);

Address = double(Address.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Given the name of a waveform or capture, returns its address in module memory.</Description>
            </Method>
            <Method>
               <Name>fpgasandboxgetregisterentry</Name>
               <Location>InstrumentSpecificFpgaSandbox</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Address, Length, AccessType] = fpgasandboxgetregisterentry(obj, FpgaSandbox, Name, AccessTypeBufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
FpgaSandbox = [double(FpgaSandbox) 0];
Name = [double(Name) 0];
Address = libpointer('int64Ptr', 0);
Length = libpointer('int64Ptr', 0);
AccessType = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'KtM5301x_FpgaSandboxGetRegisterEntry', session, FpgaSandbox, Name, Address, Length, AccessTypeBufferSize, AccessType);

Address = double(Address.Value);
Length = double(Length.Value);
AccessType = strtrim(char(AccessType.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Given a register name, returns address and other information.</Description>
            </Method>
            <Method>
               <Name>fpgasandboxpeek</Name>
               <Location>InstrumentSpecificFpgaSandbox</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Data] = fpgasandboxpeek(obj, FpgaSandbox, Address)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
FpgaSandbox = [double(FpgaSandbox) 0];
Data = libpointer('int32Ptr', 0);

status = calllib(libname, 'KtM5301x_FpgaSandboxPeek', session, FpgaSandbox, Address, Data);

Data = double(Data.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Read a 32-bit register in the sandbox.</Description>
            </Method>
            <Method>
               <Name>fpgasandboxpoke</Name>
               <Location>InstrumentSpecificFpgaSandbox</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function fpgasandboxpoke(obj, FpgaSandbox, Address, Data)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
FpgaSandbox = [double(FpgaSandbox) 0];

status = calllib(libname, 'KtM5301x_FpgaSandboxPoke', session, FpgaSandbox, Address, Data);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>fpgasandboxread8</Name>
               <Location>InstrumentSpecificFpgaSandbox</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Buffer, BufferActualSize] = fpgasandboxread8(obj, FpgaSandbox, Address, Count, BufferBufferSize, Buffer)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
FpgaSandbox = [double(FpgaSandbox) 0];
Buffer = libpointer('uint8Ptr', Buffer);
BufferActualSize = libpointer('int32Ptr', 0);

status = calllib(libname, 'KtM5301x_FpgaSandboxRead8', session, FpgaSandbox, Address, Count, BufferBufferSize, Buffer, BufferActualSize);

Buffer = double(Buffer.Value);
BufferActualSize = double(BufferActualSize.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Reads a block of sandbox-accessible module memory into an array.</Description>
            </Method>
            <Method>
               <Name>fpgasandboxreset</Name>
               <Location>InstrumentSpecificFpgaSandbox</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function fpgasandboxreset(obj, FpgaSandbox)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
FpgaSandbox = [double(FpgaSandbox) 0];

status = calllib(libname, 'KtM5301x_FpgaSandboxReset', session, FpgaSandbox);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Reset the sandbox logic.</Description>
            </Method>
            <Method>
               <Name>fpgasandboxsandboxinfo</Name>
               <Location>InstrumentSpecificFpgaSandbox</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Info] = fpgasandboxsandboxinfo(obj, FpgaSandbox, Attribute, InfoBufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
FpgaSandbox = [double(FpgaSandbox) 0];
Info = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'KtM5301x_FpgaSandboxSandboxInfo', session, FpgaSandbox, Attribute, InfoBufferSize, Info);

Info = strtrim(char(Info.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Get additional information about the sandbox</Description>
            </Method>
            <Method>
               <Name>fpgasandboxwrite8</Name>
               <Location>InstrumentSpecificFpgaSandbox</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function fpgasandboxwrite8(obj, FpgaSandbox, Address, Count, BufferBufferSize, Buffer)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
FpgaSandbox = [double(FpgaSandbox) 0];

status = calllib(libname, 'KtM5301x_FpgaSandboxWrite8', session, FpgaSandbox, Address, Count, BufferBufferSize, Buffer);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Write an array of data to sandbox-accessible module memory</Description>
            </Method>
            <Method>
               <Name>getfpgasandboxname</Name>
               <Location>InstrumentSpecificFpgaSandbox</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Name] = getfpgasandboxname(obj, Index, NameBufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Name = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'KtM5301x_GetFpgaSandboxName', session, Index, NameBufferSize, Name);

Name = strtrim(char(Name.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Returns the fpgasandbox name that corresponds to the one-based index that the user specifies.</Description>
            </Method>
            <Method>
               <Name>loadarbfrommemory</Name>
               <Location>InstrumentSpecificFpgaSandbox</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function loadarbfrommemory(obj, FpgaSandbox, ReferenceName, FirstSample, NumberOfSamples)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
FpgaSandbox = [double(FpgaSandbox) 0];
ReferenceName = [double(ReferenceName) 0];

status = calllib(libname, 'KtM5301x_LoadArbFromMemory', session, FpgaSandbox, ReferenceName, FirstSample, NumberOfSamples);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Load an ARB from the memory identified by ReferenceName to the Sandbox within this FPGA.</Description>
            </Method>
            <Method>
               <Name>loadregisterdefinitions</Name>
               <Location>InstrumentSpecificFpgaSandbox</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function loadregisterdefinitions(obj, FpgaSandbox, File)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
FpgaSandbox = [double(FpgaSandbox) 0];
File = [double(File) 0];

status = calllib(libname, 'KtM5301x_LoadRegisterDefinitions', session, FpgaSandbox, File);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Loads register definition information for sandbox registers.</Description>
            </Method>
            <Method>
               <Name>transferarbtomemory</Name>
               <Location>InstrumentSpecificFpgaSandbox</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function transferarbtomemory(obj, FpgaSandbox, ReferenceName, FirstSample, NumberOfSamples)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
FpgaSandbox = [double(FpgaSandbox) 0];
ReferenceName = [double(ReferenceName) 0];

status = calllib(libname, 'KtM5301x_TransferArbToMemory', session, FpgaSandbox, ReferenceName, FirstSample, NumberOfSamples);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Transfer a stream of data from a Sandbox within this FPGA to the memory identified by ReferenceName.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>InstrumentSpecificHviEngines</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificHviEngines1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>All</Name>
               <Location>InstrumentSpecificHviEngines</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150363, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The comma separated list of ids of all HVI engines in the instrument. The main/primary engine is first.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>gethvienginesall</Name>
               <Location>InstrumentSpecificHviEngines</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Value] = gethvienginesall(obj, ValueBufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Value = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'KtM5301x_GetHviEnginesAll', session, ValueBufferSize, Value);

Value = strtrim(char(Value.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Gets the value of the HVI_ENGINES_ALL attribute.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>InstrumentSpecificMemoryBlocks</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificMemoryBlocks1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>MemoryBlocks_Count</Name>
               <Location>InstrumentSpecificMemoryBlocks</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150362);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description/>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>getmemoryblockname</Name>
               <Location>InstrumentSpecificMemoryBlocks</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Name] = getmemoryblockname(obj, Index, NameBufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Name = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'KtM5301x_GetMemoryBlockName', session, Index, NameBufferSize, Name);

Name = strtrim(char(Name.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Returns the memoryblock name that corresponds to the one-based index that the user specifies.</Description>
            </Method>
            <Method>
               <Name>memoryblockread16</Name>
               <Location>InstrumentSpecificMemoryBlocks</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Data, DataActualSize] = memoryblockread16(obj, MemoryBlockName, Address, Count, DataBufferSize, Data)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
MemoryBlockName = [double(MemoryBlockName) 0];
Data = libpointer('int16Ptr', Data);
DataActualSize = libpointer('int32Ptr', 0);

status = calllib(libname, 'KtM5301x_MemoryBlockRead16', session, MemoryBlockName, Address, Count, DataBufferSize, Data, DataActualSize);

Data = double(Data.Value);
DataActualSize = double(DataActualSize.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>memoryblockread32</Name>
               <Location>InstrumentSpecificMemoryBlocks</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Data, DataActualSize] = memoryblockread32(obj, MemoryBlocksName2, Address, Count, DataBufferSize, Data)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
MemoryBlocksName2 = [double(MemoryBlocksName2) 0];
Data = libpointer('int32Ptr', Data);
DataActualSize = libpointer('int32Ptr', 0);

status = calllib(libname, 'KtM5301x_MemoryBlockRead32', session, MemoryBlocksName2, Address, Count, DataBufferSize, Data, DataActualSize);

Data = double(Data.Value);
DataActualSize = double(DataActualSize.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>memoryblockread8</Name>
               <Location>InstrumentSpecificMemoryBlocks</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Data, DataActualSize] = memoryblockread8(obj, MemoryBlocksName2, Address, Count, DataBufferSize, Data)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
MemoryBlocksName2 = [double(MemoryBlocksName2) 0];
Data = libpointer('uint8Ptr', Data);
DataActualSize = libpointer('int32Ptr', 0);

status = calllib(libname, 'KtM5301x_MemoryBlockRead8', session, MemoryBlocksName2, Address, Count, DataBufferSize, Data, DataActualSize);

Data = double(Data.Value);
DataActualSize = double(DataActualSize.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>memoryblockwrite16</Name>
               <Location>InstrumentSpecificMemoryBlocks</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Data, DataActualSize] = memoryblockwrite16(obj, MemoryBlocksName2, Address, Offset, Count, DataBufferSize, Data)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
MemoryBlocksName2 = [double(MemoryBlocksName2) 0];
Data = libpointer('int16Ptr', Data);
DataActualSize = libpointer('int32Ptr', 0);

status = calllib(libname, 'KtM5301x_MemoryBlockWrite16', session, MemoryBlocksName2, Address, Offset, Count, DataBufferSize, Data, DataActualSize);

Data = double(Data.Value);
DataActualSize = double(DataActualSize.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>memoryblockwrite32</Name>
               <Location>InstrumentSpecificMemoryBlocks</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Data, DataActualSize] = memoryblockwrite32(obj, MemoryBlockName, Address, Offset, Count, DataBufferSize, Data)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
MemoryBlockName = [double(MemoryBlockName) 0];
Data = libpointer('int32Ptr', Data);
DataActualSize = libpointer('int32Ptr', 0);

status = calllib(libname, 'KtM5301x_MemoryBlockWrite32', session, MemoryBlockName, Address, Offset, Count, DataBufferSize, Data, DataActualSize);

Data = double(Data.Value);
DataActualSize = double(DataActualSize.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>memoryblockwrite8</Name>
               <Location>InstrumentSpecificMemoryBlocks</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Data, DataActualSize] = memoryblockwrite8(obj, MemoryBlockName, Address, Offset, Count, DataBufferSize, Data)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
MemoryBlockName = [double(MemoryBlockName) 0];
Data = libpointer('uint8Ptr', Data);
DataActualSize = libpointer('int32Ptr', 0);

status = calllib(libname, 'KtM5301x_MemoryBlockWrite8', session, MemoryBlockName, Address, Offset, Count, DataBufferSize, Data, DataActualSize);

Data = double(Data.Value);
DataActualSize = double(DataActualSize.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description/>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>InstrumentSpecificModule</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificModule1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Additional_Information</Name>
               <Location>InstrumentSpecificModule</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150355, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>InstrumentCapability</Name>
               <Location>InstrumentSpecificModule</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150024, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Gets an XML formatted string of the capabilities of the module. See Remarks.</Description>
            </Property>
            <Property>
               <Name>MaximumRecordedTemperature</Name>
               <Location>InstrumentSpecificModule</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150025);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only -  Returns the maximum recorded operational temperature of the module.</Description>
            </Property>
            <Property>
               <Name>Module_Count</Name>
               <Location>InstrumentSpecificModule</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150023);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>Options</Name>
               <Location>InstrumentSpecificModule</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150026, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - A comma separated list of the options installed in the module.</Description>
            </Property>
            <Property>
               <Name>SerialNumber</Name>
               <Location>InstrumentSpecificModule</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150027, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Serial number of the module.</Description>
            </Property>
            <Property>
               <Name>Slot</Name>
               <Location>InstrumentSpecificModule</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150028);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - The chassis slot the module occupies.</Description>
            </Property>
            <Property>
               <Name>Temperature</Name>
               <Location>InstrumentSpecificModule</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150029);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Return the module temperature in degrees Celsius.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>getmodulename</Name>
               <Location>InstrumentSpecificModule</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Name] = getmodulename(obj, Index, NameBufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Name = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'KtM5301x_GetModuleName', session, Index, NameBufferSize, Name);

Name = strtrim(char(Name.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Returns the module name that corresponds to the one-based index that the user specifies.</Description>
            </Method>
            <Method>
               <Name>modulegetvalue</Name>
               <Location>InstrumentSpecificModule</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = modulegetvalue(obj, Module, Name, ValBufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Module = [double(Module) 0];
Name = [double(Name) 0];
Val = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'KtM5301x_ModuleGetValue', session, Module, Name, ValBufferSize, Val);

Val = strtrim(char(Val.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Get the value of named property. The name and value implementation is module specific and intended to expose advanced low level properties.</Description>
            </Method>
            <Method>
               <Name>modulesetvalue</Name>
               <Location>InstrumentSpecificModule</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function modulesetvalue(obj, Module, Name, Value)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Module = [double(Module) 0];
Name = [double(Name) 0];
Value = [double(Value) 0];

status = calllib(libname, 'KtM5301x_ModuleSetValue', session, Module, Name, Value);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Set the value of named property. The name and value implementation is module specific and intended to expose advanced low level properties.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>InstrumentSpecificModuleCalibration</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificModuleCalibration1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>AdjustmentInformation</Name>
               <Location>InstrumentSpecificModuleCalibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150030, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - A multi-line list of calibration adjustment information. Each system with this module that a system calibration has been performed with will generate a line that includes the calibration date and instrument identifier.</Description>
            </Property>
            <Property>
               <Name>DueDate</Name>
               <Location>InstrumentSpecificModuleCalibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150031, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - The computed date of the next required module calibration date. If the module is not subject to periodic calibration, this returns 'n/a'. If the module has not been calibrated, this returns 'unknown'.  If the module is calibrated, this returns a date formatted for the current locale.</Description>
            </Property>
            <Property>
               <Name>Status</Name>
               <Location>InstrumentSpecificModuleCalibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150032);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>2.0</Value>
                     <Value>4.0</Value>
                     <Value>1.0</Value>
                     <Value>3.0</Value>
                     <Value>0.0</Value>
                     <Value>5.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - This property indicates the calibration status of the module.  The status is determined by comparing the (module calibration due date - cal due reminder value) to the current date.</Description>
            </Property>
            <Property>
               <Name>VerificationInformation</Name>
               <Location>InstrumentSpecificModuleCalibration</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150033, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - A multi-line list of calibration verification information. Each system that the module calibration has been verified with will generate a line that includes the calibration date and instrument identifier.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>InstrumentSpecificModuleCurrentDraw</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificModuleCurrentDraw1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>CurrentDraw_Count</Name>
               <Location>InstrumentSpecificModuleCurrentDraw</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150353);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>Value</Name>
               <Location>InstrumentSpecificModuleCurrentDraw</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150354);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description/>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>getcurrentdrawname</Name>
               <Location>InstrumentSpecificModuleCurrentDraw</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Name] = getcurrentdrawname(obj, Module, Index, NameBufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Module = [double(Module) 0];
Name = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'KtM5301x_GetCurrentDrawName', session, Module, Index, NameBufferSize, Name);

Name = strtrim(char(Name.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Returns the currentdraw name that corresponds to the one-based index that the user specifies.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>InstrumentSpecificModuleIndicator</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificModuleIndicator1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Enabled</Name>
               <Location>InstrumentSpecificModuleIndicator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150044);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150044, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Get or set the indicator state.</Description>
            </Property>
            <Property>
               <Name>Indicator_Count</Name>
               <Location>InstrumentSpecificModuleIndicator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150043);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description/>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>getindicatorname</Name>
               <Location>InstrumentSpecificModuleIndicator</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Name] = getindicatorname(obj, Module, Index, NameBufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Module = [double(Module) 0];
Name = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'KtM5301x_GetIndicatorName', session, Module, Index, NameBufferSize, Name);

Name = strtrim(char(Name.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Returns the indicator name that corresponds to the one-based index that the user specifies.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>InstrumentSpecificModuleNonvolatile</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificModuleNonvolatile1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>AssetNumber</Name>
               <Location>InstrumentSpecificModuleNonvolatile</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150034, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150034 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>A persistent arbitrary string with a maximum length of 1024 characters nominally intended to hold a physical asset tag identifier.  Setting this property caches the value in memory. To persist it use System Nonvolatile Write.</Description>
            </Property>
            <Property>
               <Name>CalDueReminder</Name>
               <Location>InstrumentSpecificModuleNonvolatile</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150035);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150035 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The 'reminder' period, in days, prior to any calibration due. Range 0..1000 days. Setting this property caches the value in memory. To persist it use System Nonvolatile Write.</Description>
            </Property>
            <Property>
               <Name>EnableInstrumentCalWarnings</Name>
               <Location>InstrumentSpecificModuleNonvolatile</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150036);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150036, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enable/disable of instrument cal checks/warnings.  If this value is true and module calibration date + ModuleCalInterval is close or past, then a warning will be generated. Setting this property caches the value in memory. To persist it use System Nonvolatile Write.</Description>
            </Property>
            <Property>
               <Name>EnableModuleCalWarnings</Name>
               <Location>InstrumentSpecificModuleNonvolatile</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150037);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150037, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enable/disable of module cal checks/warnings.  If this value is true and module calibration date + ModuleCalInterval is close or past, then a warning will be generated. Setting this property caches the value in memory. To persist it use System Nonvolatile Write.</Description>
            </Property>
            <Property>
               <Name>EnablePeriodicCal</Name>
               <Location>InstrumentSpecificModuleNonvolatile</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150038);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150038, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Enable/disable of 'subject to periodic cal'.  If this value is false, no checks of cal dates/intervals should be done and the SFP should display 'Not subject to periodic cal'. Setting this property caches the value in memory. To persist it use System Nonvolatile Write.</Description>
            </Property>
            <Property>
               <Name>InstrumentCalInterval</Name>
               <Location>InstrumentSpecificModuleNonvolatile</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150039);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150039 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The instrument (multi-module) calibration interval in days. Range 1..10000 days. Checks for 'cal due' are based on the instrument's calibration date (set by Keysight manufacturing/service) + InstrumentCalInterval. Setting this property caches the value in memory. To persist it use System Nonvolatile Write.</Description>
            </Property>
            <Property>
               <Name>ModuleCalInterval</Name>
               <Location>InstrumentSpecificModuleNonvolatile</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150040);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150040 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The module calibration interval in days. Range 1..10000 days.  Checks for 'cal due' are based on the module's calibration date (set by Keysight manufacturing/service) + ModuleCalInterval. Setting this property caches the value in memory. To persist it use System Nonvolatile Write.</Description>
            </Property>
            <Property>
               <Name>Passphrase</Name>
               <Location>InstrumentSpecificModuleNonvolatile</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150041, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150041 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>A passphrase used to protect various values in Nonvolatile (see below). Passphrase must be provided to Write if any of these values have changed. Setting this property caches the value in memory. To persist it use System Nonvolatile Write.</Description>
            </Property>
            <Property>
               <Name>SystemIdentification</Name>
               <Location>InstrumentSpecificModuleNonvolatile</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150042, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevistring',RepCapIdentifier, 1150042 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>A persistent arbitrary string with a maximum length of 32 characters nominally intended to provide a user customizable method to distinguish modules. Setting this property caches the value in memory. To persist it use System Nonvolatile Write.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>nonvolatileclear</Name>
               <Location>InstrumentSpecificModuleNonvolatile</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function nonvolatileclear(obj, Module)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Module = [double(Module) 0];

status = calllib(libname, 'KtM5301x_NonvolatileClear', session, Module);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Clears/discards any changes to cached values and resets cached values to the current nonvolatile settings.</Description>
            </Method>
            <Method>
               <Name>nonvolatilewrite</Name>
               <Location>InstrumentSpecificModuleNonvolatile</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function nonvolatilewrite(obj, Module, Passphrase)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Module = [double(Module) 0];
Passphrase = [double(Passphrase) 0];

status = calllib(libname, 'KtM5301x_NonvolatileWrite', session, Module, Passphrase);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Writes all cached values from the System.Nonvolatile.Item interface to nonvolatile memory. If certain values have changed (see below) the current Passphrase must be supplied to Write.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>InstrumentSpecificPeerToPeerPort</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificPeerToPeerPort1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>BitWidth</Name>
               <Location>InstrumentSpecificPeerToPeerPort</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150093);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Width of the data channel in bits.</Description>
            </Property>
            <Property>
               <Name>IsFifo</Name>
               <Location>InstrumentSpecificPeerToPeerPort</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150094);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Indicates if this PeerToPeerPort instance is a streaming FIFO (true) or memory mapped (false).</Description>
            </Property>
            <Property>
               <Name>JobId</Name>
               <Location>InstrumentSpecificPeerToPeerPort</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150095);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Identifier for the current peer to peer transfer.  This is the same as the parameter returned by the StartAsync method.</Description>
            </Property>
            <Property>
               <Name>PeerToPeerPort_Count</Name>
               <Location>InstrumentSpecificPeerToPeerPort</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150092);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>Role</Name>
               <Location>InstrumentSpecificPeerToPeerPort</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150096);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150096 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>3.0</Value>
                     <Value>4.0</Value>
                     <Value>0.0</Value>
                     <Value>6.0</Value>
                     <Value>5.0</Value>
                     <Value>2.0</Value>
                     <Value>1.0</Value>
                     <Value>7.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Role defines the port's abilities for a peer-to-peer data transfer.   A specific Port may only support some Roles.</Description>
            </Property>
            <Property>
               <Name>VisaSessionId</Name>
               <Location>InstrumentSpecificPeerToPeerPort</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150097);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The visa session identifier.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>getpeertopeerportname</Name>
               <Location>InstrumentSpecificPeerToPeerPort</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Name] = getpeertopeerportname(obj, Index, NameBufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Name = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'KtM5301x_GetPeerToPeerPortName', session, Index, NameBufferSize, Name);

Name = strtrim(char(Name.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Returns the peertopeerport name that corresponds to the one-based index that the user specifies.</Description>
            </Method>
            <Method>
               <Name>peertopeerportpreparecompleter</Name>
               <Location>InstrumentSpecificPeerToPeerPort</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Length, DataFormat, VisaSessionId, Space, Offset] = peertopeerportpreparecompleter(obj, PeerToPeerPort, MemoryName, Address)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
PeerToPeerPort = [double(PeerToPeerPort) 0];
MemoryName = [double(MemoryName) 0];
Length = libpointer('int64Ptr', 0);
DataFormat = libpointer('int32Ptr', 0);
VisaSessionId = libpointer('int32Ptr', 0);
Space = libpointer('int16Ptr', 0);
Offset = libpointer('int64Ptr', 0);

status = calllib(libname, 'KtM5301x_PeerToPeerPortPrepareCompleter', session, PeerToPeerPort, MemoryName, Address, Length, DataFormat, VisaSessionId, Space, Offset);

Length = double(Length.Value);
DataFormat = double(DataFormat.Value);
VisaSessionId = double(VisaSessionId.Value);
Space = double(Space.Value);
Offset = double(Offset.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Prepare the port for a peer-to-peer data transfer. Deprecated</Description>
            </Method>
            <Method>
               <Name>peertopeerportpreparecompleterex</Name>
               <Location>InstrumentSpecificPeerToPeerPort</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [DataFormat, MoreSegments, SegmentLength, VisaSession, Space, Offset] = peertopeerportpreparecompleterex(obj, PeerToPeerPort, Name, Segment)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
PeerToPeerPort = [double(PeerToPeerPort) 0];
Name = [double(Name) 0];
DataFormat = libpointer('int32Ptr', 0);
MoreSegments = libpointer('uint16Ptr', 0);
SegmentLength = libpointer('int64Ptr', 0);
VisaSession = libpointer('int32Ptr', 0);
Space = libpointer('int16Ptr', 0);
Offset = libpointer('int64Ptr', 0);

status = calllib(libname, 'KtM5301x_PeerToPeerPortPrepareCompleterEx', session, PeerToPeerPort, Name, DataFormat, Segment, MoreSegments, SegmentLength, VisaSession, Space, Offset);

DataFormat = double(DataFormat.Value);
MoreSegments = double(MoreSegments.Value);
SegmentLength = double(SegmentLength.Value);
VisaSession = double(VisaSession.Value);
Space = double(Space.Value);
Offset = double(Offset.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Prepare the port for a peer-to-peer data transfer of waveform data, as I/O completer.</Description>
            </Method>
            <Method>
               <Name>peertopeerportpreparerequester</Name>
               <Location>InstrumentSpecificPeerToPeerPort</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [DataFormat] = peertopeerportpreparerequester(obj, PeerToPeerPort, MemoryName, Address, Length)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
PeerToPeerPort = [double(PeerToPeerPort) 0];
MemoryName = [double(MemoryName) 0];
DataFormat = libpointer('int32Ptr', 0);

status = calllib(libname, 'KtM5301x_PeerToPeerPortPrepareRequester', session, PeerToPeerPort, MemoryName, Address, Length, DataFormat);

DataFormat = double(DataFormat.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Prepare the port for a peer-to-peer data transfer. Deprecated.</Description>
            </Method>
            <Method>
               <Name>peertopeerportpreparerequesterex</Name>
               <Location>InstrumentSpecificPeerToPeerPort</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [DataFormat, Length] = peertopeerportpreparerequesterex(obj, PeerToPeerPort, Name)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
PeerToPeerPort = [double(PeerToPeerPort) 0];
Name = [double(Name) 0];
DataFormat = libpointer('int32Ptr', 0);
Length = libpointer('int64Ptr', 0);

status = calllib(libname, 'KtM5301x_PeerToPeerPortPrepareRequesterEx', session, PeerToPeerPort, Name, DataFormat, Length);

DataFormat = double(DataFormat.Value);
Length = double(Length.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Prepare the port for a peer-to-peer data transfer of waveform data, as I/O requester.</Description>
            </Method>
            <Method>
               <Name>peertopeerportpreparestreamingcompleter</Name>
               <Location>InstrumentSpecificPeerToPeerPort</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Length, DataFormat, Space, Offset] = peertopeerportpreparestreamingcompleter(obj, PeerToPeerPort, FifoChannel, FlowControlAddress)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
PeerToPeerPort = [double(PeerToPeerPort) 0];
Length = libpointer('int64Ptr', 0);
DataFormat = libpointer('int32Ptr', 0);
Space = libpointer('int16Ptr', 0);
Offset = libpointer('int64Ptr', 0);

status = calllib(libname, 'KtM5301x_PeerToPeerPortPrepareStreamingCompleter', session, PeerToPeerPort, FifoChannel, Length, DataFormat, Space, Offset, FlowControlAddress);

Length = double(Length.Value);
DataFormat = double(DataFormat.Value);
Space = double(Space.Value);
Offset = double(Offset.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Prepare a streaming FIFO port for a peer-to-peer data transfer as a completer.  Locks the FIFO channel resource until Stop is called.</Description>
            </Method>
            <Method>
               <Name>peertopeerportpreparestreamingrequester</Name>
               <Location>InstrumentSpecificPeerToPeerPort</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Length, DataFormat, FlowControlAddress] = peertopeerportpreparestreamingrequester(obj, PeerToPeerPort, FifoChannel, BitWidth)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
PeerToPeerPort = [double(PeerToPeerPort) 0];
Length = libpointer('int64Ptr', 0);
DataFormat = libpointer('int32Ptr', 0);
FlowControlAddress = libpointer('int64Ptr', 0);

status = calllib(libname, 'KtM5301x_PeerToPeerPortPrepareStreamingRequester', session, PeerToPeerPort, FifoChannel, Length, DataFormat, BitWidth, FlowControlAddress);

Length = double(Length.Value);
DataFormat = double(DataFormat.Value);
FlowControlAddress = double(FlowControlAddress.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Prepare a streaming FIFO port for a peer-to-peer data transfer as the bus requester.  Locks the FIFO channel resource until Stop is called.</Description>
            </Method>
            <Method>
               <Name>peertopeerportstartasync</Name>
               <Location>InstrumentSpecificPeerToPeerPort</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [JobId] = peertopeerportstartasync(obj, PeerToPeerPort, PeerVisaSessionId, PeerSpace, PeerOffset, Length)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
PeerToPeerPort = [double(PeerToPeerPort) 0];
JobId = libpointer('int32Ptr', 0);

status = calllib(libname, 'KtM5301x_PeerToPeerPortStartAsync', session, PeerToPeerPort, PeerVisaSessionId, PeerSpace, PeerOffset, Length, JobId);

JobId = double(JobId.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Start a peer to peer data transfer.</Description>
            </Method>
            <Method>
               <Name>peertopeerportstop</Name>
               <Location>InstrumentSpecificPeerToPeerPort</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function peertopeerportstop(obj, PeerToPeerPort)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
PeerToPeerPort = [double(PeerToPeerPort) 0];

status = calllib(libname, 'KtM5301x_PeerToPeerPortStop', session, PeerToPeerPort);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Stop any asynchronous peer to peer transfers.  Also releases hardware resources used by FIFO streaming.</Description>
            </Method>
            <Method>
               <Name>peertopeerportwait</Name>
               <Location>InstrumentSpecificPeerToPeerPort</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = peertopeerportwait(obj, PeerToPeerPort, Timeout)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
PeerToPeerPort = [double(PeerToPeerPort) 0];
Val = libpointer('uint16Ptr', 0);

status = calllib(libname, 'KtM5301x_PeerToPeerPortWait', session, PeerToPeerPort, Timeout, Val);

Val = double(Val.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Wait for peer to peer transfer to complete.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>InstrumentSpecificPxiChannel</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificPxiChannel1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Direction</Name>
               <Location>InstrumentSpecificPxiChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150325);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150325 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>PxiChannel_Count</Name>
               <Location>InstrumentSpecificPxiChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150324);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>State</Name>
               <Location>InstrumentSpecificPxiChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150326);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150326 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>getpxichannelname</Name>
               <Location>InstrumentSpecificPxiChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Name] = getpxichannelname(obj, Index, NameBufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Name = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'KtM5301x_GetPxiChannelName', session, Index, NameBufferSize, Name);

Name = strtrim(char(Name.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Returns the pxichannel name that corresponds to the one-based index that the user specifies.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>InstrumentSpecificRemoteCache</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificRemoteCache1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>remotecachecache</Name>
               <Location>InstrumentSpecificRemoteCache</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = remotecachecache(obj, Filename, ValBufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Filename = [double(Filename) 0];
Val = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'KtM5301x_RemoteCacheCache', session, Filename, ValBufferSize, Val);

Val = strtrim(char(Val.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>remotecachegetpath</Name>
               <Location>InstrumentSpecificRemoteCache</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = remotecachegetpath(obj, Filename, Signature, ValBufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Filename = [double(Filename) 0];
Signature = [double(Signature) 0];
Val = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'KtM5301x_RemoteCacheGetPath', session, Filename, Signature, ValBufferSize, Val);

Val = strtrim(char(Val.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>remotecacheremove</Name>
               <Location>InstrumentSpecificRemoteCache</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function remotecacheremove(obj, Filename)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Filename = [double(Filename) 0];

status = calllib(libname, 'KtM5301x_RemoteCacheRemove', session, Filename);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>remotecachesave</Name>
               <Location>InstrumentSpecificRemoteCache</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = remotecachesave(obj, Filename, BufferBufferSize, Buffer, Count, ValBufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Filename = [double(Filename) 0];
Val = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'KtM5301x_RemoteCacheSave', session, Filename, BufferBufferSize, Buffer, Count, ValBufferSize, Val);

Val = strtrim(char(Val.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description/>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>InstrumentSpecificSmbChannel</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificSmbChannel1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>SmbChannel_Count</Name>
               <Location>InstrumentSpecificSmbChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150318);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>Smbchannel_Direction</Name>
               <Location>InstrumentSpecificSmbChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150323);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150323 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>Smbchannel_Input_Skew</Name>
               <Location>InstrumentSpecificSmbChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150320);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150320 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>Smbchannel_Output_Skew</Name>
               <Location>InstrumentSpecificSmbChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150321);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150321 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>Smbchannel_State</Name>
               <Location>InstrumentSpecificSmbChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150322);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150322 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>getsmbchannelname</Name>
               <Location>InstrumentSpecificSmbChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Name] = getsmbchannelname(obj, Index, NameBufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Name = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'KtM5301x_GetSmbChannelName', session, Index, NameBufferSize, Name);

Name = strtrim(char(Name.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Returns the smbchannel name that corresponds to the one-based index that the user specifies.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>InstrumentSpecificStatus</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificStatus1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>statusclearevent</Name>
               <Location>InstrumentSpecificStatus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function statusclearevent(obj, Mask)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'KtM5301x_StatusClearEvent', session, Mask);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Clears the specified event from the instrument status.  Events remain set until either Reset or Clear are called.</Description>
            </Method>
            <Method>
               <Name>statusgeteventstate</Name>
               <Location>InstrumentSpecificStatus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = statusgeteventstate(obj, Mask)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Val = libpointer('uint16Ptr', 0);

status = calllib(libname, 'KtM5301x_StatusGetEventState', session, Mask, Val);

Val = double(Val.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Query the state of the specified event.  Events are set by hardware conditions and the event remains set until either Reset or Clear are called.</Description>
            </Method>
            <Method>
               <Name>statussetevent</Name>
               <Location>InstrumentSpecificStatus</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function statussetevent(obj, Mask)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'KtM5301x_StatusSetEvent', session, Mask);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Sets the specified event in the instrument status.  Normally events are set by hardware conditions, but may also be set using SetEvent for diagnostics and testing. Events remain set until either Reset or Clear are called.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>InstrumentSpecificStreamReader</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificStreamReader1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>AvailableBytes</Name>
               <Location>InstrumentSpecificStreamReader</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150080);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the number of bytes currently available to read.</Description>
            </Property>
            <Property>
               <Name>BitWidth</Name>
               <Location>InstrumentSpecificStreamReader</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150081);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Width of the FPGA data channel in bits.</Description>
            </Property>
            <Property>
               <Name>FifoChannel</Name>
               <Location>InstrumentSpecificStreamReader</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150082);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Identifies the FPGA function (playground bus) connected to this stream.</Description>
            </Property>
            <Property>
               <Name>FifoSize</Name>
               <Location>InstrumentSpecificStreamReader</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150083);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the capacity of the hardware FIFO in bytes.</Description>
            </Property>
            <Property>
               <Name>IsOpen</Name>
               <Location>InstrumentSpecificStreamReader</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150084);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Indicates if the active StreamReader is open.</Description>
            </Property>
            <Property>
               <Name>StreamReader_Count</Name>
               <Location>InstrumentSpecificStreamReader</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150078);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>Timeout</Name>
               <Location>InstrumentSpecificStreamReader</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150085);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150085 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The number of bytes to read.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>getstreamreadername</Name>
               <Location>InstrumentSpecificStreamReader</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Name] = getstreamreadername(obj, Index, NameBufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Name = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'KtM5301x_GetStreamReaderName', session, Index, NameBufferSize, Name);

Name = strtrim(char(Name.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Returns the streamreader name that corresponds to the one-based index that the user specifies.</Description>
            </Method>
            <Method>
               <Name>streamreaderclose</Name>
               <Location>InstrumentSpecificStreamReader</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function streamreaderclose(obj, StreamReader)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
StreamReader = [double(StreamReader) 0];

status = calllib(libname, 'KtM5301x_StreamReaderClose', session, StreamReader);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Close the stream.</Description>
            </Method>
            <Method>
               <Name>streamreadergetdata32</Name>
               <Location>InstrumentSpecificStreamReader</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Buffer, BufferActualSize] = streamreadergetdata32(obj, StreamReader, BufferBufferSize, Buffer)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
StreamReader = [double(StreamReader) 0];
Buffer = libpointer('int32Ptr', Buffer);
BufferActualSize = libpointer('int32Ptr', 0);

status = calllib(libname, 'KtM5301x_StreamReaderGetData32', session, StreamReader, BufferBufferSize, Buffer, BufferActualSize);

Buffer = double(Buffer.Value);
BufferActualSize = double(BufferActualSize.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Returns the data buffered by prior call to StartRead32Async.</Description>
            </Method>
            <Method>
               <Name>streamreadergetdata8</Name>
               <Location>InstrumentSpecificStreamReader</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Buffer, BufferActualSize] = streamreadergetdata8(obj, StreamReader, BufferBufferSize, Buffer)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
StreamReader = [double(StreamReader) 0];
Buffer = libpointer('uint8Ptr', Buffer);
BufferActualSize = libpointer('int32Ptr', 0);

status = calllib(libname, 'KtM5301x_StreamReaderGetData8', session, StreamReader, BufferBufferSize, Buffer, BufferActualSize);

Buffer = double(Buffer.Value);
BufferActualSize = double(BufferActualSize.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Returns the data buffered by prior call to StartRead8Async.</Description>
            </Method>
            <Method>
               <Name>streamreadergethighestfifolevel</Name>
               <Location>InstrumentSpecificStreamReader</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = streamreadergethighestfifolevel(obj, StreamReader, Reset)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
StreamReader = [double(StreamReader) 0];
Val = libpointer('int32Ptr', 0);

status = calllib(libname, 'KtM5301x_StreamReaderGetHighestFifoLevel', session, StreamReader, Reset, Val);

Val = double(Val.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Returns the highest FIFO level (fill level) in bytes, since the last reset.</Description>
            </Method>
            <Method>
               <Name>streamreaderopen</Name>
               <Location>InstrumentSpecificStreamReader</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function streamreaderopen(obj, StreamReader)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
StreamReader = [double(StreamReader) 0];

status = calllib(libname, 'KtM5301x_StreamReaderOpen', session, StreamReader);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Open the stream.  Must be called before reading data.  Locks shared resources used by the stream.</Description>
            </Method>
            <Method>
               <Name>streamreaderread32</Name>
               <Location>InstrumentSpecificStreamReader</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Buffer, BufferActualSize] = streamreaderread32(obj, StreamReader, BufferBufferSize, Buffer, Count)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
StreamReader = [double(StreamReader) 0];
Buffer = libpointer('int32Ptr', Buffer);
BufferActualSize = libpointer('int32Ptr', 0);

status = calllib(libname, 'KtM5301x_StreamReaderRead32', session, StreamReader, BufferBufferSize, Buffer, BufferActualSize, Count);

Buffer = double(Buffer.Value);
BufferActualSize = double(BufferActualSize.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Reads the specified number of 32-bit words from the stream and returns the data in a buffer.</Description>
            </Method>
            <Method>
               <Name>streamreaderread8</Name>
               <Location>InstrumentSpecificStreamReader</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Buffer, BufferActualSize] = streamreaderread8(obj, StreamReader, BufferBufferSize, Buffer, Count)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
StreamReader = [double(StreamReader) 0];
Buffer = libpointer('uint8Ptr', Buffer);
BufferActualSize = libpointer('int32Ptr', 0);

status = calllib(libname, 'KtM5301x_StreamReaderRead8', session, StreamReader, BufferBufferSize, Buffer, BufferActualSize, Count);

Buffer = double(Buffer.Value);
BufferActualSize = double(BufferActualSize.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Reads the specified number of 32-bit words from the stream and returns the data in a buffer.</Description>
            </Method>
            <Method>
               <Name>streamreaderstartread32async</Name>
               <Location>InstrumentSpecificStreamReader</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function streamreaderstartread32async(obj, StreamReader, Count)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
StreamReader = [double(StreamReader) 0];

status = calllib(libname, 'KtM5301x_StreamReaderStartRead32Async', session, StreamReader, Count);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Start a background task to asynchronously read 32 bit data from the module.</Description>
            </Method>
            <Method>
               <Name>streamreaderstartread8async</Name>
               <Location>InstrumentSpecificStreamReader</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function streamreaderstartread8async(obj, StreamReader, Count)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
StreamReader = [double(StreamReader) 0];

status = calllib(libname, 'KtM5301x_StreamReaderStartRead8Async', session, StreamReader, Count);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Start a background task to asynchronously read data as bytes from the hardware FIFO.</Description>
            </Method>
            <Method>
               <Name>streamreadertransfertofileasync</Name>
               <Location>InstrumentSpecificStreamReader</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function streamreadertransfertofileasync(obj, StreamReader, Filename, Length)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
StreamReader = [double(StreamReader) 0];
Filename = [double(Filename) 0];

status = calllib(libname, 'KtM5301x_StreamReaderTransferToFileAsync', session, StreamReader, Filename, Length);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Asynchronously transfer data from the module to the specified file.</Description>
            </Method>
            <Method>
               <Name>streamreaderwaitfortransfercomplete</Name>
               <Location>InstrumentSpecificStreamReader</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = streamreaderwaitfortransfercomplete(obj, StreamReader, Timeout)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
StreamReader = [double(StreamReader) 0];
Val = libpointer('uint16Ptr', 0);

status = calllib(libname, 'KtM5301x_StreamReaderWaitForTransferComplete', session, StreamReader, Timeout, Val);

Val = double(Val.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Wait up to Timeout milliseconds for the transfer to complete, then return status.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>InstrumentSpecificStreamWriter</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificStreamWriter1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>AvailableSpaceBytes</Name>
               <Location>InstrumentSpecificStreamWriter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150086);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the FIFO space currently available (in bytes) for writing.</Description>
            </Property>
            <Property>
               <Name>BitWidth</Name>
               <Location>InstrumentSpecificStreamWriter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150087);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Width of the FPGA data channel in bits.</Description>
            </Property>
            <Property>
               <Name>FifoChannel</Name>
               <Location>InstrumentSpecificStreamWriter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150088);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Identifies the FPGA function (playground bus) connected to this stream.</Description>
            </Property>
            <Property>
               <Name>FifoSize</Name>
               <Location>InstrumentSpecificStreamWriter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150089);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Returns the capacity of the hardware FIFO in bytes.</Description>
            </Property>
            <Property>
               <Name>IsOpen</Name>
               <Location>InstrumentSpecificStreamWriter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150090);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Indicates if the active StreamWriter is open.</Description>
            </Property>
            <Property>
               <Name>StreamWriter_Count</Name>
               <Location>InstrumentSpecificStreamWriter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150079);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>Timeout</Name>
               <Location>InstrumentSpecificStreamWriter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150091);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150091 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Open the stream.  Must be called before writing data. Locks shared resources used by the stream.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>getstreamwritername</Name>
               <Location>InstrumentSpecificStreamWriter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Name] = getstreamwritername(obj, Index, NameBufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Name = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'KtM5301x_GetStreamWriterName', session, Index, NameBufferSize, Name);

Name = strtrim(char(Name.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Returns the streamwriter name that corresponds to the one-based index that the user specifies.</Description>
            </Method>
            <Method>
               <Name>streamwriterclose</Name>
               <Location>InstrumentSpecificStreamWriter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function streamwriterclose(obj, StreamWriter)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
StreamWriter = [double(StreamWriter) 0];

status = calllib(libname, 'KtM5301x_StreamWriterClose', session, StreamWriter);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Close the stream.</Description>
            </Method>
            <Method>
               <Name>streamwritergetlowestfifolevel</Name>
               <Location>InstrumentSpecificStreamWriter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = streamwritergetlowestfifolevel(obj, StreamWriter, Reset)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
StreamWriter = [double(StreamWriter) 0];
Val = libpointer('int32Ptr', 0);

status = calllib(libname, 'KtM5301x_StreamWriterGetLowestFifoLevel', session, StreamWriter, Reset, Val);

Val = double(Val.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description/>
            </Method>
            <Method>
               <Name>streamwriteropen</Name>
               <Location>InstrumentSpecificStreamWriter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function streamwriteropen(obj, StreamWriter)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
StreamWriter = [double(StreamWriter) 0];

status = calllib(libname, 'KtM5301x_StreamWriterOpen', session, StreamWriter);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Open the stream.  Must be called before writing data. Locks shared resources used by the stream.</Description>
            </Method>
            <Method>
               <Name>streamwritertransferfromfileasync</Name>
               <Location>InstrumentSpecificStreamWriter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function streamwritertransferfromfileasync(obj, StreamWriter, Filename)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
StreamWriter = [double(StreamWriter) 0];
Filename = [double(Filename) 0];

status = calllib(libname, 'KtM5301x_StreamWriterTransferFromFileAsync', session, StreamWriter, Filename);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Asynchronously transfer data from the specified file to the module.</Description>
            </Method>
            <Method>
               <Name>streamwriterwaitfortransfercomplete</Name>
               <Location>InstrumentSpecificStreamWriter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = streamwriterwaitfortransfercomplete(obj, StreamWriter, Timeout)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
StreamWriter = [double(StreamWriter) 0];
Val = libpointer('uint16Ptr', 0);

status = calllib(libname, 'KtM5301x_StreamWriterWaitForTransferComplete', session, StreamWriter, Timeout, Val);

Val = double(Val.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Wait up to Timeout milliseconds for the transfer to complete, then return the current status.</Description>
            </Method>
            <Method>
               <Name>streamwriterwrite32</Name>
               <Location>InstrumentSpecificStreamWriter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function streamwriterwrite32(obj, StreamWriter, BufferBufferSize, Buffer, Count)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
StreamWriter = [double(StreamWriter) 0];

status = calllib(libname, 'KtM5301x_StreamWriterWrite32', session, StreamWriter, BufferBufferSize, Buffer, Count);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Writes the specified number of 32-bit words to the module.</Description>
            </Method>
            <Method>
               <Name>streamwriterwrite32async</Name>
               <Location>InstrumentSpecificStreamWriter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function streamwriterwrite32async(obj, StreamWriter, BufferBufferSize, Buffer, Count)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
StreamWriter = [double(StreamWriter) 0];

status = calllib(libname, 'KtM5301x_StreamWriterWrite32Async', session, StreamWriter, BufferBufferSize, Buffer, Count);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Asynchronously writes the specified number of 32-bit words to the module.</Description>
            </Method>
            <Method>
               <Name>streamwriterwrite32asyncbuffered</Name>
               <Location>InstrumentSpecificStreamWriter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function streamwriterwrite32asyncbuffered(obj, StreamWriterName, BufferBufferSize, Buffer, Count)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
StreamWriterName = [double(StreamWriterName) 0];

status = calllib(libname, 'KtM5301x_StreamWriterWrite32AsyncBuffered', session, StreamWriterName, BufferBufferSize, Buffer, Count);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Buffer (i.e. copy) the data then asynchronously writes the specified number of 32-bit words to the module. See Remarks.</Description>
            </Method>
            <Method>
               <Name>streamwriterwrite8</Name>
               <Location>InstrumentSpecificStreamWriter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function streamwriterwrite8(obj, StreamWriter, BufferBufferSize, Buffer, Count)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
StreamWriter = [double(StreamWriter) 0];

status = calllib(libname, 'KtM5301x_StreamWriterWrite8', session, StreamWriter, BufferBufferSize, Buffer, Count);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Writes the specified number of 8-bit bytes to the module.</Description>
            </Method>
            <Method>
               <Name>streamwriterwrite8async</Name>
               <Location>InstrumentSpecificStreamWriter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function streamwriterwrite8async(obj, StreamWriter, BufferBufferSize, Buffer, Count)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
StreamWriter = [double(StreamWriter) 0];

status = calllib(libname, 'KtM5301x_StreamWriterWrite8Async', session, StreamWriter, BufferBufferSize, Buffer, Count);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Asynchronously write the specified number of bytes to the module.</Description>
            </Method>
            <Method>
               <Name>streamwriterwrite8asyncbuffered</Name>
               <Location>InstrumentSpecificStreamWriter</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function streamwriterwrite8asyncbuffered(obj, StreamWriterName, BufferBufferSize, Buffer, Count)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
StreamWriterName = [double(StreamWriterName) 0];

status = calllib(libname, 'KtM5301x_StreamWriterWrite8AsyncBuffered', session, StreamWriterName, BufferBufferSize, Buffer, Count);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Buffer (i.e. copy) the data then asynchronously write the specified number of bytes to the module. See Remarks.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>InstrumentSpecificSystem</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificSystem1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>About</Name>
               <Location>InstrumentSpecificSystem</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150004, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - Returns addition information about the system beyond the firmware and hardware versions. This is typically included in an SFP (Soft Front Panel) About Box dialog.</Description>
            </Property>
            <Property>
               <Name>ApiInstance</Name>
               <Location>InstrumentSpecificSystem</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint64',RepCapIdentifier, 1150311);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Returns a value used to create 'add-on' interfaces in a C++ programming environment.  See Remarks.</Description>
            </Property>
            <Property>
               <Name>GcTimingOptimizationEnabled</Name>
               <Location>InstrumentSpecificSystem</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150005);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150005, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Indicates whether the hardware driver should change the .NET garbage collector state to optimize hardware settling times. Set value is not affected by a Reset. Default = true.</Description>
            </Property>
            <Property>
               <Name>IdentifyEnabled</Name>
               <Location>InstrumentSpecificSystem</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150006);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150006, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>IdentifyEnabled indicates if the module should 'draw attention to itself' by flashing a front panel LED to help the user identify a specific module.</Description>
            </Property>
            <Property>
               <Name>InstanceId</Name>
               <Location>InstrumentSpecificSystem</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150007);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - The identification value associated with this instance of the instrument.</Description>
            </Property>
            <Property>
               <Name>Options</Name>
               <Location>InstrumentSpecificSystem</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150008, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - A comma separated list of the effective options of the system.  See Remarks.</Description>
            </Property>
            <Property>
               <Name>SerialNumber</Name>
               <Location>InstrumentSpecificSystem</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150003, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>The instrument serial number.</Description>
            </Property>
            <Property>
               <Name>Timeout</Name>
               <Location>InstrumentSpecificSystem</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150009);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150009 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>A system timeout in milliseconds that is applied to all long operations, other than trigger timeout, so that there is a determinate amount of time before the method returns. See Remarks section for additional guidelines.  Default: 10,000 ms (10 s)</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>getmoduleinformation</Name>
               <Location>InstrumentSpecificSystem</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Identity] = getmoduleinformation(obj, SlotIndex, IdentityBufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Identity = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'KtM5301x_GetModuleInformation', session, SlotIndex, IdentityBufferSize, Identity);

Identity = strtrim(char(Identity.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Gets the M5301x module information associated with the specified slot index.</Description>
            </Method>
            <Method>
               <Name>getmoduleslotassignments</Name>
               <Location>InstrumentSpecificSystem</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Slots, SlotsActualSize] = getmoduleslotassignments(obj, SlotsBufferSize, Slots)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Slots = libpointer('int32Ptr', Slots);
SlotsActualSize = libpointer('int32Ptr', 0);

status = calllib(libname, 'KtM5301x_GetModuleSlotAssignments', session, SlotsBufferSize, Slots, SlotsActualSize);

Slots = double(Slots.Value);
SlotsActualSize = double(SlotsActualSize.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Gets the slot assignments for the modules.</Description>
            </Method>
            <Method>
               <Name>systemrecallstate</Name>
               <Location>InstrumentSpecificSystem</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function systemrecallstate(obj, State)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'KtM5301x_SystemRecallState', session, State);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Restore the instrument to a state previously stored in the instrument's internal memory.</Description>
            </Method>
            <Method>
               <Name>systemsavestate</Name>
               <Location>InstrumentSpecificSystem</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function systemsavestate(obj, State)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'KtM5301x_SystemSaveState', session, State);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Save the current instrument state to the instrument's internal memory.</Description>
            </Method>
            <Method>
               <Name>updatefirmware</Name>
               <Location>InstrumentSpecificSystem</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = updatefirmware(obj, WaitForUpdate)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Val = libpointer('int32Ptr', 0);

status = calllib(libname, 'KtM5301x_UpdateFirmware', session, WaitForUpdate, Val);

Val = double(Val.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Updates the firmware of the modules in the instrument with the recommended version. This operation can take several minutes. Modules that already have the recommended (or later) version are not affected.</Description>
            </Method>
            <Method>
               <Name>waitforupdatefirmwarecomplete</Name>
               <Location>InstrumentSpecificSystem</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Progress, Val] = waitforupdatefirmwarecomplete(obj, TimeoutMilliseconds)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Progress = libpointer('int32Ptr', 0);
Val = libpointer('int32Ptr', 0);

status = calllib(libname, 'KtM5301x_WaitForUpdateFirmwareComplete', session, TimeoutMilliseconds, Progress, Val);

Progress = double(Progress.Value);
Val = double(Val.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Wait up to TimeoutMilliseconds for the module firmware update started by UpdateFirmware to complete.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>InstrumentSpecificSystemAdditionalTests</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificSystemAdditionalTests1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>LedState</Name>
               <Location>InstrumentSpecificSystemAdditionalTests</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150312);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150312, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>Toggle LED on/off</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>ledrwtest</Name>
               <Location>InstrumentSpecificSystemAdditionalTests</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = ledrwtest(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Val = libpointer('uint16Ptr', 0);

status = calllib(libname, 'KtM5301x_LedRwTest', session, Val);

Val = double(Val.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Test register read/write using the LED register</Description>
            </Method>
            <Method>
               <Name>ledtoggle</Name>
               <Location>InstrumentSpecificSystemAdditionalTests</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function ledtoggle(obj, State)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'KtM5301x_LedToggle', session, State);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>State of the LED</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>InstrumentSpecificSystemLicensing</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificSystemLicensing1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>HostIdentifier</Name>
               <Location>InstrumentSpecificSystemLicensing</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150011, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - The unique key identifying the system controller for licensing purposes. Also called HostID.</Description>
            </Property>
            <Property>
               <Name>InstalledLicenses</Name>
               <Location>InstrumentSpecificSystemLicensing</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevistring',RepCapIdentifier, 1150012, 512);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>String</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description>Read Only - A semicolon separated list of the software licenses installed on the system controller. Each software license consists of a comma separated Feature Name and Description.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>InstrumentSpecificSystemLinkChannel</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificSystemLinkChannel1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>SystemLinkChannel_Count</Name>
               <Location>InstrumentSpecificSystemLinkChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150348);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>Systemlinkchannel_Direction</Name>
               <Location>InstrumentSpecificSystemLinkChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150350);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150350 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>Systemlinkchannel_Direction_Type</Name>
               <Location>InstrumentSpecificSystemLinkChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150351);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>1.0</Value>
                     <Value>0.0</Value>
                     <Value>2.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>always</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>Systemlinkchannel_Output_Safety</Name>
               <Location>InstrumentSpecificSystemLinkChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150349);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150349 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
            <Property>
               <Name>Systemlinkchannel_State</Name>
               <Location>InstrumentSpecificSystemLinkChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviint32',RepCapIdentifier, 1150352);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviint32',RepCapIdentifier, 1150352 ,propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>enum</Constraint>
                  <ConstraintValue>
                     <Value>0.0</Value>
                     <Value>1.0</Value>
                  </ConstraintValue>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description/>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>getsystemlinkchannelname</Name>
               <Location>InstrumentSpecificSystemLinkChannel</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Name] = getsystemlinkchannelname(obj, Index, NameBufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Name = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'KtM5301x_GetSystemLinkChannelName', session, Index, NameBufferSize, Name);

Name = strtrim(char(Name.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Returns the systemlinkchannel name that corresponds to the one-based index that the user specifies.</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>InstrumentSpecificSystemSFP</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificSystemSFP1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>ControlsEnabled</Name>
               <Location>InstrumentSpecificSystemSFP</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150015);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150015, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>When true the user can interact with the SFP and change settings. When false, the instrument is 'in remote' and the user cannot change settings using the SFP.  Analogous to conventional instrument's remote/local.</Description>
            </Property>
            <Property>
               <Name>MinimizeOnStart</Name>
               <Location>InstrumentSpecificSystemSFP</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150317);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150317, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>When true the SFP will be minimize to the Windows system tray on launch and whenever the window is minimized.  If false, the SFP will launch as normal and will minimize to the taskbar only.</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo>
            <Method>
               <Name>systemsfpclose</Name>
               <Location>InstrumentSpecificSystemSFP</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function systemsfpclose(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'KtM5301x_SystemSfpClose', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Close the SFP and corresponding IVI driver. Releases all resources that were allocated for a module with driver.system.sfp.open() and must always be called before exiting the application using driver.system.sfp.exit().</Description>
            </Method>
            <Method>
               <Name>systemsfpexit</Name>
               <Location>InstrumentSpecificSystemSFP</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function systemsfpexit(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'KtM5301x_SystemSfpExit', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Close the SFP and the corresponding IVI driver and release all the SFP's resources (AppDomain, Application, message loop, etc.).</Description>
            </Method>
            <Method>
               <Name>systemsfpmessagebox</Name>
               <Location>InstrumentSpecificSystemSFP</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = systemsfpmessagebox(obj, Message, Title, Buttons, WaitForResponse)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Message = [double(Message) 0];
Title = [double(Title) 0];
Val = libpointer('int32Ptr', 0);

status = calllib(libname, 'KtM5301x_SystemSfpMessageBox', session, Message, Title, Buttons, WaitForResponse, Val);

Val = double(Val.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>MessageBox will display the specified message and optionally block until the user responds.</Description>
            </Method>
            <Method>
               <Name>systemsfpopen</Name>
               <Location>InstrumentSpecificSystemSFP</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function systemsfpopen(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'KtM5301x_SystemSfpOpen', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Open the SFP and connect to the current instrument instance.</Description>
            </Method>
            <Method>
               <Name>systemsfprefresh</Name>
               <Location>InstrumentSpecificSystemSFP</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function systemsfprefresh(obj, WaitUntilDone)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'KtM5301x_SystemSfpRefresh', session, WaitUntilDone);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Refresh the GUI - the equivalent of menu item View-&gt;Refresh. This will normally generate IVI calls to retrieve current values used by the SFP.</Description>
            </Method>
            <Method>
               <Name>systemsfpwaitforuser</Name>
               <Location>InstrumentSpecificSystemSFP</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [Val] = systemsfpwaitforuser(obj, Timeout)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
Val = libpointer('uint16Ptr', 0);

status = calllib(libname, 'KtM5301x_SystemSfpWaitForUser', session, Timeout, Val);

Val = double(Val.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Wait for the user to either close the SFP or generate a continue event (see Remarks).</Description>
            </Method>
         </MethodInfo>
      </Group>
      <Group>
         <Name>InstrumentSpecificSystemSFPAutoRefresh</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="InstrumentSpecificSystemSFPAutoRefresh1" Index="1"/>
         </Mappings>
         <PropertyInfo>
            <Property>
               <Name>Enabled</Name>
               <Location>InstrumentSpecificSystemSFPAutoRefresh</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributeviboolean',RepCapIdentifier, 1150013);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributeviboolean',RepCapIdentifier, 1150013, propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>When true, the SFP enables a background worker thread to auto-refresh the SFP every RefreshPeriod seconds.  When false, the SFP is only refreshed when the user explicitly updates it (via menu item View-&gt;Refresh) or the client code calls Refresh.</Description>
            </Property>
            <Property>
               <Name>Period</Name>
               <Location>InstrumentSpecificSystemSFPAutoRefresh</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <GetMCode>function propertyValue = getProperty(obj, propertyName)
% Return a property value.
%   This function is called to return the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
propertyValue = invoke (attributeaccessors, 'getattributevireal64',RepCapIdentifier, 1150014);</GetMCode>
                  <SetMCode>function set(obj, propertyName, propertyValue)
% Set a property value.
%   This function is called to set the device or group object property
%   value. If the property is a group property, OBJ is the group object. If
%   the property is a base device property, OBJ is the device object.
deviceobj = get(obj, 'Parent');
attributeaccessors = get(deviceobj, 'AttributeAccessors');
RepCapIdentifier  = get(deviceobj, 'RepCapIdentifier');
RepCapIdentifier = [double(RepCapIdentifier) 0];
invoke (attributeaccessors, 'setattributevireal64',RepCapIdentifier, 1150014 , propertyValue);</SetMCode>
               </Code>
               <PermissibleType>
                  <Type>Double</Type>
                  <Constraint>none</Constraint>
               </PermissibleType>
               <DefaultValue/>
               <ReadOnly>never</ReadOnly>
               <Description>The time, in seconds, between automatic SFP refresh requests if AutoRefresh == true</Description>
            </Property>
         </PropertyInfo>
         <MethodInfo/>
      </Group>
      <Group>
         <Name>Utility</Name>
         <Description/>
         <Command/>
         <Size>1</Size>
         <Mappings>
            <ChannelMap Command="Utility1" Index="1"/>
         </Mappings>
         <PropertyInfo/>
         <MethodInfo>
            <Method>
               <Name>clearerror</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function clearerror(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'KtM5301x_ClearError', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function clears the error code and error description for the current execution thread and for the IVI session. If the user specifies a valid IVI session for the Vi parameter, this function clears the error information for the session. If the user passes VI_NULL for the Vi parameter, this function clears the error information for the current execution thread. If the Vi parameter is an invalid session, the function does nothing and returns an error.</Description>
            </Method>
            <Method>
               <Name>disable</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function disable(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'KtM5301x_Disable', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Quickly places the instrument in a state where it has no, or minimal, effect on the external system to which it is connected.  This state is not necessarily a known state.</Description>
            </Method>
            <Method>
               <Name>errormessage</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [ErrorMessage] = errormessage(obj, ErrorCode)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ErrorMessage = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'KtM5301x_error_message', session, ErrorCode, ErrorMessage);

ErrorMessage = strtrim(char(ErrorMessage.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Translates the error return value from an IVI driver function to a user-readable string. The user should pass a buffer with at least 256 bytes for the ErrorMessage parameter.</Description>
            </Method>
            <Method>
               <Name>errorquery</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [ErrorCode, ErrorMessage] = errorquery(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ErrorCode = libpointer('int32Ptr', 0);
ErrorMessage = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'KtM5301x_error_query', session, ErrorCode, ErrorMessage);

ErrorCode = double(ErrorCode.Value);
ErrorMessage = strtrim(char(ErrorMessage.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Queries the instrument and returns instrument specific error information.  This function can be used when QueryInstrumentStatus is True to retrieve error details when the driver detects an instrument error.</Description>
            </Method>
            <Method>
               <Name>geterror</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [ErrorCode, ErrorDescription] = geterror(obj, ErrorDescriptionBufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
ErrorCode = libpointer('int32Ptr', 0);
ErrorDescription = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'KtM5301x_GetError', session, ErrorCode, ErrorDescriptionBufferSize, ErrorDescription);

ErrorCode = double(ErrorCode.Value);
ErrorDescription = strtrim(char(ErrorDescription.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>This function retrieves and then clears the IVI error information for the session or the current execution thread. If the user specifies a valid IVI session for the Vi parameter, Get Error retrieves and then clears the error information for the session. If the user passes VI_NULL for the Vi parameter, Get Error retrieves and then clears the error information for the current execution thread. If the Vi parameter is an invalid session, the function does nothing and returns an error. Normally, the error information describes the first error that occurred since the user last called the Get Error or Clear Error function.</Description>
            </Method>
            <Method>
               <Name>getnextcoercionrecord</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [CoercionRecord] = getnextcoercionrecord(obj, CoercionRecordBufferSize)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
CoercionRecord = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'KtM5301x_GetNextCoercionRecord', session, CoercionRecordBufferSize, CoercionRecord);

CoercionRecord = strtrim(char(CoercionRecord.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Returns the oldest record from the coercion record list.  Records are only added to the list if RecordCoercions is True.</Description>
            </Method>
            <Method>
               <Name>invalidateallattributes</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function invalidateallattributes(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'KtM5301x_InvalidateAllAttributes', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Invalidates all of the driver's cached values.</Description>
            </Method>
            <Method>
               <Name>locksession</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [CallerHasLock] = locksession(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
CallerHasLock = libpointer('uint16Ptr', 0);

status = calllib(libname, 'KtM5301x_LockSession', session, CallerHasLock);

CallerHasLock = double(CallerHasLock.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Obtains a multithread lock on the driver after waiting until all other execution threads have released their locks on the instrument session.</Description>
            </Method>
            <Method>
               <Name>reset</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function reset(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'KtM5301x_reset', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Places the instrument in a known state and configures instrument options on which the IVI specific driver depends (for example, enabling/disabling headers).  For an IEEE 488.2 instrument, Reset sends the command string *RST to the instrument.</Description>
            </Method>
            <Method>
               <Name>resetwithdefaults</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function resetwithdefaults(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');

status = calllib(libname, 'KtM5301x_ResetWithDefaults', session);


if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Does the equivalent of Reset and then, (1) disables class extension capability groups, (2) sets attributes to initial values defined by class specs, and (3) configures the driver to option string settings used when Initialize was last executed.</Description>
            </Method>
            <Method>
               <Name>revisionquery</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [DriverRev, InstrRev] = revisionquery(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
DriverRev = libpointer('int8Ptr', repmat(10, 1, 512));
InstrRev = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'KtM5301x_revision_query', session, DriverRev, InstrRev);

DriverRev = strtrim(char(DriverRev.Value));
InstrRev = strtrim(char(InstrRev.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Retrieves revision information from the instrument.</Description>
            </Method>
            <Method>
               <Name>selftest</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [TestResult, TestMessage] = selftest(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
TestResult = libpointer('int16Ptr', 0);
TestMessage = libpointer('int8Ptr', repmat(10, 1, 512));

status = calllib(libname, 'KtM5301x_self_test', session, TestResult, TestMessage);

TestResult = double(TestResult.Value);
TestMessage = strtrim(char(TestMessage.Value));

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Performs an instrument self test, waits for the instrument to complete the test, and queries the instrument for the results.  If the instrument passes the test, TestResult is zero and TestMessage is 'Self test passed'.</Description>
            </Method>
            <Method>
               <Name>unlocksession</Name>
               <Location>Utility</Location>
               <CapabilityGroup>Base</CapabilityGroup>
               <Type>MCode</Type>
               <Code>
                  <MCode>function [CallerHasLock] = unlocksession(obj)

libname = get(get(obj, 'Parent'), 'DriverName');
session = get(get(obj, 'Parent'), 'Interface');
CallerHasLock = libpointer('uint16Ptr', 0);

status = calllib(libname, 'KtM5301x_UnlockSession', session, CallerHasLock);

CallerHasLock = double(CallerHasLock.Value);

if (status &lt; 0)
	errorMessage = libpointer('int8Ptr', repmat(10, 1, 512));
	status = calllib(libname, 'KtM5301x_error_message', session, status, errorMessage);

	if (status &lt; 0)
		error('Failed to interpret error message');
	end

	errorMessage = strtrim(char(errorMessage.Value));
	error('The instrument returned an error while executing the function.\n%s', errorMessage)
end
</MCode>
               </Code>
               <Description>Releases a previously obtained multithread lock.</Description>
            </Method>
         </MethodInfo>
      </Group>
   </GroupInfo>
</MATLABInstrumentDriver>